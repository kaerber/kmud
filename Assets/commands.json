{
  "recall": "\nif self.Can( \u0027recall\u0027 ):\n    if self.MoveToRoom( self.RespawnAt ):\n        self.Has( \u0027recalled\u0027 )",
  "train": "hpCost = 10\npc.Model.PowerPoints = pc.Model.PowerPoints - hpCost\npc.Model.BaseStats.HP = pc.Model.BaseStats.HP + 1\npc.View.Write( \"You receive 1 hit point.\\n\" )",
  "practice": "import clr\nimport sys\nfrom System.Collections.Generic import *\nfrom System.Linq import Enumerable\nfrom System import StringComparison\nfrom Kaerber.MUD.Entities import *\n\nkey = Enumerable.ElementAt[str]( args, 0 )\nignoreCase = StringComparison.CurrentCultureIgnoreCase\nskillName = Enumerable.FirstOrDefault[str]( world.Skills.Keys, lambda name: name.StartsWith( key, ignoreCase ) )\nif( skillName == None ):\n    pc.View.Write( \"No such skill.\\n\" )\n    sys.exit()\n\nskillRec = world.Skills[skillName]\nif( skillRec.Rating \u003e pc.Model.PowerPoints ):\n    pc.View.Write( \"You do not have enough power points to practice it.\\n\" )\n    sys.exit()\n\nif( not pc.Model.Skills.ContainsKey( skillName ) ):\n    pc.Model.Skills.Add( skillName, Skill( world.Skills[skillName] ) )\n\npc.Model.PowerPoints -= skillRec.Rating\npc.Model.Skills[skillName].Improve()\nskillRec.Balance += 1\npc.View.WriteFormat( \"You have practiced {0} skill to {1}.\\n\" , skillName, pc.Model.Skills[skillName].Value )",
  "score": "pc.View.WriteFormat( \"You are {0}.\\n\" , pc.Model.ShortDescr )\npc.View.WriteFormat( \"You have {0}/{1} hitpoints.\\n\", pc.Model.Health.Value, pc.Model.Health.Max )",
  "ml": "def MLRun():\n    exec pc.Model.Data[\u0027ml_text\u0027]\n\ndef MLText( args ):\n    pc.Model.Data[\u0027ml_text\u0027] = args[0]\n\nif not pc.Model.Data.ContainsKey( \u0027ml_text\u0027 ):\n    pc.Model.Data[\u0027ml_text\u0027] = \u0027\u0027\n\nprint dir(args)\nprint args\nprint dir()\nif( args[0] == \u0027text\u0027 ):\n    print args[1:]\n    MLText( args[1:] )\nelif( args[0] == \u0027run\u0027 ):\n    MLRun()\npc.View.Write( pc.Model.Data[\u0027ml_text\u0027] + \"\\n\" )",
  "skills": "pc.View.Write( \"Your skills:\\n\" )\nfor pair in pc.Model.Skills:\n    pc.View.WriteFormat( \"    {0,-30} {1}\\n\", pair.Key, pair.Value.Value )",
  "stat": "import clr\n\ndef Time_Format( time ):\n    return(\n        ( time / world.TimeHour ).ToString() + \" hours\" if time \u003e= 0\n            else \"\" )\n\ndef Stat_Room():\n    room = pc.Model.InRoom\n    pc.View.Write( \"You are in the room \" + room.ShortDescr + \" [\" + room.Vnum + \"]\\n\" )\n    pc.View.Write( \"Exits:\\n\" ) \r\n    for exit in room.Exits: \r\n        pc.View.Write( \"  \" + exit.Name + \"\\t[\" + exit.To.Vnum + \"]\\t\" + exit.To.ShortDescr + \"\\n\" )\n\r\n    if room.Resets \u003c\u003e None and room.Resets.MobResets \u003c\u003e None and room.Resets.MobResets.Count \u003e 0:\n        pc.View.Write( \"\\nmob resets:\\n\" )\n        for mobReset in room.Resets.MobResets:\n            pc.View.Write( \"  [\" + mobReset.Vnum + \"] \" + world.Mobs[ mobReset.Vnum ].ShortDescr + \"\\n\" )\n\n    if room.Resets \u003c\u003e None and room.Resets.ObjectResets \u003c\u003e None and room.Resets.ObjectResets.Count \u003e 0:\n        pc.View.Write( \"\\nobj resets:\\n\" )\r\n        for objReset in room.Resets.ObjectResets:\n            pc.View.Write( \"  [\" + objReset.Vnum + \"] \" + world.Items[ objReset.Vnum ].ShortDescr + \"\\n\" )\n\n    if room.Affects.Count \u003e 0:\n        pc.View.Write( \"\\naffects:\\n\" )\r\n        for affect in room.Affects:\r\n            formattedTime = Time_Format( affect.Duration / world.TimeBase )\r\n            if formattedTime != \"\": formattedTime = \" for \" + formattedTime\n\r\n            pc.View.WritePreformatted( \"  \" + affect.Name + \"\\t: is active\"\n                + formattedTime + \"\\n\" )\n\nStat_Room()",
  "mlrun": "import clr\n\nimport Kaerber.MUD.Entities\nfrom Kaerber.MUD.Entities import *\n\nexec rawArgs\npc.View.Write( \"\\nOk.\\n\" )",
  "exits": "import clr\n\nfor exit in pc.Model.InRoom.Exits:\n    pc.View.WritePreformatted( \"    \" + exit.Name.PadRight( 10 ) + exit.To.ShortDescr + \"\\n\" )",
  "buy": "import sys\n\nimport shops\n\nif( pc.Model.InRoom.Shop == None ):\n    pc.View.Write( \"You can\u0027t do it here.\\n\" )\n    sys.exit()\n\nshops.SellToChar( pc.Model.InRoom.Shop, pc.Model, args )",
  "update": "pc.Model.InRoom.Update()\npc.View.Write( \"Room updated.\\n\" )",
  "restore": "\nimport sys\nimport clr\nimport System\n\nclr.ImportExtensions( System.Linq )\n\nif( args.Count == 0 ):\n    self.Write( \"Restore whom?\\n\" )\n    sys.exit()\n\nvch = self.Room.SelectCharacters( lambda ch: ch.MatchNames( args[0] ) ).FirstOrDefault()\nif( not vch ):\n    self.Write( \"Who is \" + args[0] + \"?\\n\" )\n    sys.exit()\nvch.Restore()\nself.Write( \"Character \" + vch.ShortDescr + \" restored.\\n\" )"
}